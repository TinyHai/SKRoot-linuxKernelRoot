#include <stdio.h>
#include <iostream>
#include <malloc.h>
#include <vector>
#include <windows.h>
#include "../3rdparty/find_xrefs.h"
#pragma comment(lib, "../3rdparty/capstone-4.0.2-win64/capstone.lib")

struct partInfo {
	size_t pos = 0;
	char partHex[160 * 2 * 4] = { 0 };
};

char* GetFileBuf(const char* lpszFilePath, int& nSize) {
	FILE* pFile = fopen(lpszFilePath, "rb");
	if (!pFile) {
		return NULL;
	}
	fseek(pFile, 0, SEEK_END);
	nSize = ftell(pFile);
	rewind(pFile);

	char* buffer = (char*)malloc(sizeof(char) * nSize);
	if (!buffer) {
		return NULL;
	}

	size_t result = fread(buffer, 1, nSize, pFile);
	if ((int)result != nSize) {
		free(buffer);
		return NULL;
	}
	fclose(pFile);

	return buffer;
}

const char* FindBytes(const char* pWaitSearchAddress, size_t nLen, const char* bForSearch, size_t ifLen) {
	for (size_t i = 0; i < nLen; i++) {
		char* pData = (char*)(pWaitSearchAddress + i);
		char* bTemForSearch = (char*)bForSearch;
		bool bContinue = false;
		for (size_t y = 0; y < ifLen; y++, ++pData, ++bTemForSearch) {
			if (*pData != *bTemForSearch) {
				bContinue = true;
				break;
			}
		}
		if (bContinue) {
			continue;
		}
		return pWaitSearchAddress + i;
	}
	return 0;
}

void RemoveDuplicatePartInfo(std::vector<partInfo>& vPartInfo) {
	std::vector<partInfo> vResult;
	for (const partInfo& part : vPartInfo) {
		bool bShow = false;
		for (const partInfo& item : vResult) {
			if (item.pos == part.pos) {
				bShow = true;
				break;
			}
		}
		if (!bShow) {
			vResult.push_back(part);
		}
	}
	vPartInfo.clear();
	for (const partInfo& part : vResult) {
		vPartInfo.push_back(part);
	}
}

void RemoveDuplicateFuncStartResultMap(std::map<size_t, std::shared_ptr<size_t>>& resultMap) {
	std::map<size_t, std::shared_ptr<size_t>> newResultMap;
	for (auto iter1 = resultMap.begin(); iter1 != resultMap.end(); iter1++) {
		bool exist = false;
		if (iter1->second && *iter1->second) {
			for (auto iter2 = newResultMap.begin(); iter2 != newResultMap.end(); iter2++) {
				if (iter2->second && *iter2->second == *iter1->second) {
					exist = true;
					break;
				}
			}
		}
		if (exist) {
			continue;
		}
		newResultMap[iter1->first] = iter1->second;
	}
	resultMap = newResultMap;
}

void SearchFeature1(char* image, size_t size) {

	char feature4[8 * 4] = {
		'\x04','\x00','\x80','\x52',
		'\x04','\x00','\x80','\xD2',
		'\xE4','\x03','\x1F','\x2A',
		'\xE4','\x03','\x1F','\xAA',

		'\x05','\x00','\x80','\x52',
		'\x05','\x00','\x80','\xD2',
		'\xE5','\x03','\x1F','\x2A',
		'\xE5','\x03','\x1F','\xAA',
	};
	std::vector<partInfo> vSearch;
	for (int y = 0; y < 8; y++) {
		char* pAddress = (char*)FindBytes(image, size, &feature4[y * 4], 4);
		while (pAddress) {
			partInfo info;
			if ((size - (size_t)pAddress - (size_t)image) < sizeof(info.partHex) / 2) {
				break;
			} else if ((pAddress - image) < sizeof(info.partHex) / 2) {
				break;
			}
			info.pos = (size_t)pAddress - (size_t)image;
			size_t targetAddr = (size_t)pAddress - sizeof(info.partHex) / 2;
			memcpy(&info.partHex, (void*)targetAddr, sizeof(info.partHex));
			vSearch.push_back(info);

			pAddress += 4;
			pAddress = (char*)FindBytes(pAddress, size - ((size_t)pAddress - (size_t)image), &feature4[y * 4], 4);
		}

	}
	for (auto iter = vSearch.begin(); iter != vSearch.end(); ) {
		partInfo info = *iter;
		char tmpData[20 * 4];

		size_t readAddr = (size_t)&info.partHex;
		readAddr += sizeof(info.partHex) / 2 + 4;
		memcpy(&tmpData, (void*)readAddr, sizeof(tmpData));

		bool bFind = false;
		for (size_t s = 0; s < sizeof(tmpData); s += 4) {
			char ch1 = '\x94';
			char ch2 = '\x97';
			if (memcmp((void*)((size_t)tmpData + (size_t)s + (size_t)3), (BYTE*)&ch1, 1) == 0) {

				bFind = true;
				break;
			} else if (memcmp((void*)((size_t)tmpData + (size_t)s + (size_t)3), (BYTE*)&ch2, 1) == 0) {

				bFind = true;
				break;
			}
		}
		if (bFind) {
			iter++;
			continue;
		}
		iter = vSearch.erase(iter);
	}


	char feature1[31 * 2 * 4] = {
	'\x60', '\x00', '\x80', '\x52',
	'\x61', '\x00', '\x80', '\x52',
	'\x62', '\x00', '\x80', '\x52',
	'\x63', '\x00', '\x80', '\x52',
	'\x64', '\x00', '\x80', '\x52',
	'\x65', '\x00', '\x80', '\x52',
	'\x66', '\x00', '\x80', '\x52',
	'\x67', '\x00', '\x80', '\x52',
	'\x68', '\x00', '\x80', '\x52',
	'\x69', '\x00', '\x80', '\x52',
	'\x6A', '\x00', '\x80', '\x52',
	'\x6B', '\x00', '\x80', '\x52',
	'\x6C', '\x00', '\x80', '\x52',
	'\x6D', '\x00', '\x80', '\x52',
	'\x6E', '\x00', '\x80', '\x52',
	'\x6F', '\x00', '\x80', '\x52',
	'\x70', '\x00', '\x80', '\x52',
	'\x71', '\x00', '\x80', '\x52',
	'\x72', '\x00', '\x80', '\x52',
	'\x73', '\x00', '\x80', '\x52',
	'\x74', '\x00', '\x80', '\x52',
	'\x75', '\x00', '\x80', '\x52',
	'\x76', '\x00', '\x80', '\x52',
	'\x77', '\x00', '\x80', '\x52',
	'\x78', '\x00', '\x80', '\x52',
	'\x79', '\x00', '\x80', '\x52',
	'\x7A', '\x00', '\x80', '\x52',
	'\x7B', '\x00', '\x80', '\x52',
	'\x7C', '\x00', '\x80', '\x52',
	'\x7D', '\x00', '\x80', '\x52',
	'\x7E', '\x00', '\x80', '\x52',


	'\xE0', '\x07', '\x00', '\x32',
	'\xE1', '\x07', '\x00', '\x32',
	'\xE2', '\x07', '\x00', '\x32',
	'\xE3', '\x07', '\x00', '\x32',
	'\xE4', '\x07', '\x00', '\x32',
	'\xE5', '\x07', '\x00', '\x32',
	'\xE6', '\x07', '\x00', '\x32',
	'\xE7', '\x07', '\x00', '\x32',
	'\xE8', '\x07', '\x00', '\x32',
	'\xE9', '\x07', '\x00', '\x32',
	'\xEA', '\x07', '\x00', '\x32',
	'\xEB', '\x07', '\x00', '\x32',
	'\xEC', '\x07', '\x00', '\x32',
	'\xED', '\x07', '\x00', '\x32',
	'\xEE', '\x07', '\x00', '\x32',
	'\xEF', '\x07', '\x00', '\x32',
	'\xF0', '\x07', '\x00', '\x32',
	'\xF1', '\x07', '\x00', '\x32',
	'\xF2', '\x07', '\x00', '\x32',
	'\xF3', '\x07', '\x00', '\x32',
	'\xF4', '\x07', '\x00', '\x32',
	'\xF5', '\x07', '\x00', '\x32',
	'\xF6', '\x07', '\x00', '\x32',
	'\xF7', '\x07', '\x00', '\x32',
	'\xF8', '\x07', '\x00', '\x32',
	'\xF9', '\x07', '\x00', '\x32',
	'\xFA', '\x07', '\x00', '\x32',
	'\xFB', '\x07', '\x00', '\x32',
	'\xFC', '\x07', '\x00', '\x32',
	'\xFD', '\x07', '\x00', '\x32',
	'\xFE', '\x07', '\x00', '\x32',
	};

	std::vector<partInfo> vSearch2;
	for (int i = 0; i < vSearch.size(); i++) {
		partInfo info = vSearch.at(i);

		for (size_t s = 0; s < sizeof(info.partHex); s += 4) {
			for (size_t y = 0; y < 31 * 2; y++) {
				if (memcmp((void*)((size_t)info.partHex + (size_t)s), (BYTE*)&feature1[y * 4], 4) == 0) {
					vSearch2.push_back(info);
					break;
				}
			}

		}
	}

	std::vector<partInfo> vSearch3;
	for (int i = 0; i < vSearch2.size(); i++) {
		partInfo info = vSearch2.at(i);
		for (size_t s = 0; s < sizeof(info.partHex); s += 4) {
			char ch1 = '\x13';
			if (memcmp((void*)((size_t)info.partHex + (size_t)s + (size_t)3), (BYTE*)&ch1, 1) == 0) {
				ch1 = '\x05';
				if (memcmp((void*)((size_t)info.partHex + (size_t)s + (size_t)2), (BYTE*)&ch1, 1) == 0) {
					vSearch3.push_back(info);
					break;
				}
			}

		}


	}

	std::vector<partInfo> vSearch4;
	for (int i = 0; i < vSearch3.size(); i++) {
		partInfo info = vSearch3.at(i);
		for (size_t s = 0; s < sizeof(info.partHex); s += 4) {
			char ch1 = '\x1A';
			if (memcmp((void*)((size_t)info.partHex + (size_t)s + (size_t)3), (BYTE*)&ch1, 1) == 0) {
				vSearch4.push_back(info);
				break;
			}


		}
	}


	char feature5[961 * 4] = {
'\x00','\x04','\x40','\xB9',
'\x20','\x04','\x40','\xB9',
'\x40','\x04','\x40','\xB9',
'\x60','\x04','\x40','\xB9',
'\x80','\x04','\x40','\xB9',
'\xA0','\x04','\x40','\xB9',
'\xC0','\x04','\x40','\xB9',
'\xE0','\x04','\x40','\xB9',
'\x00','\x05','\x40','\xB9',
'\x20','\x05','\x40','\xB9',
'\x40','\x05','\x40','\xB9',
'\x60','\x05','\x40','\xB9',
'\x80','\x05','\x40','\xB9',
'\xA0','\x05','\x40','\xB9',
'\xC0','\x05','\x40','\xB9',
'\xE0','\x05','\x40','\xB9',
'\x00','\x06','\x40','\xB9',
'\x20','\x06','\x40','\xB9',
'\x40','\x06','\x40','\xB9',
'\x60','\x06','\x40','\xB9',
'\x80','\x06','\x40','\xB9',
'\xA0','\x06','\x40','\xB9',
'\xC0','\x06','\x40','\xB9',
'\xE0','\x06','\x40','\xB9',
'\x00','\x07','\x40','\xB9',
'\x20','\x07','\x40','\xB9',
'\x40','\x07','\x40','\xB9',
'\x60','\x07','\x40','\xB9',
'\x80','\x07','\x40','\xB9',
'\xA0','\x07','\x40','\xB9',
'\xC0','\x07','\x40','\xB9',
'\x01','\x04','\x40','\xB9',
'\x21','\x04','\x40','\xB9',
'\x41','\x04','\x40','\xB9',
'\x61','\x04','\x40','\xB9',
'\x81','\x04','\x40','\xB9',
'\xA1','\x04','\x40','\xB9',
'\xC1','\x04','\x40','\xB9',
'\xE1','\x04','\x40','\xB9',
'\x01','\x05','\x40','\xB9',
'\x21','\x05','\x40','\xB9',
'\x41','\x05','\x40','\xB9',
'\x61','\x05','\x40','\xB9',
'\x81','\x05','\x40','\xB9',
'\xA1','\x05','\x40','\xB9',
'\xC1','\x05','\x40','\xB9',
'\xE1','\x05','\x40','\xB9',
'\x01','\x06','\x40','\xB9',
'\x21','\x06','\x40','\xB9',
'\x41','\x06','\x40','\xB9',
'\x61','\x06','\x40','\xB9',
'\x81','\x06','\x40','\xB9',
'\xA1','\x06','\x40','\xB9',
'\xC1','\x06','\x40','\xB9',
'\xE1','\x06','\x40','\xB9',
'\x01','\x07','\x40','\xB9',
'\x21','\x07','\x40','\xB9',
'\x41','\x07','\x40','\xB9',
'\x61','\x07','\x40','\xB9',
'\x81','\x07','\x40','\xB9',
'\xA1','\x07','\x40','\xB9',
'\xC1','\x07','\x40','\xB9',
'\x02','\x04','\x40','\xB9',
'\x22','\x04','\x40','\xB9',
'\x42','\x04','\x40','\xB9',
'\x62','\x04','\x40','\xB9',
'\x82','\x04','\x40','\xB9',
'\xA2','\x04','\x40','\xB9',
'\xC2','\x04','\x40','\xB9',
'\xE2','\x04','\x40','\xB9',
'\x02','\x05','\x40','\xB9',
'\x22','\x05','\x40','\xB9',
'\x42','\x05','\x40','\xB9',
'\x62','\x05','\x40','\xB9',
'\x82','\x05','\x40','\xB9',
'\xA2','\x05','\x40','\xB9',
'\xC2','\x05','\x40','\xB9',
'\xE2','\x05','\x40','\xB9',
'\x02','\x06','\x40','\xB9',
'\x22','\x06','\x40','\xB9',
'\x42','\x06','\x40','\xB9',
'\x62','\x06','\x40','\xB9',
'\x82','\x06','\x40','\xB9',
'\xA2','\x06','\x40','\xB9',
'\xC2','\x06','\x40','\xB9',
'\xE2','\x06','\x40','\xB9',
'\x02','\x07','\x40','\xB9',
'\x22','\x07','\x40','\xB9',
'\x42','\x07','\x40','\xB9',
'\x62','\x07','\x40','\xB9',
'\x82','\x07','\x40','\xB9',
'\xA2','\x07','\x40','\xB9',
'\xC2','\x07','\x40','\xB9',
'\x03','\x04','\x40','\xB9',
'\x23','\x04','\x40','\xB9',
'\x43','\x04','\x40','\xB9',
'\x63','\x04','\x40','\xB9',
'\x83','\x04','\x40','\xB9',
'\xA3','\x04','\x40','\xB9',
'\xC3','\x04','\x40','\xB9',
'\xE3','\x04','\x40','\xB9',
'\x03','\x05','\x40','\xB9',
'\x23','\x05','\x40','\xB9',
'\x43','\x05','\x40','\xB9',
'\x63','\x05','\x40','\xB9',
'\x83','\x05','\x40','\xB9',
'\xA3','\x05','\x40','\xB9',
'\xC3','\x05','\x40','\xB9',
'\xE3','\x05','\x40','\xB9',
'\x03','\x06','\x40','\xB9',
'\x23','\x06','\x40','\xB9',
'\x43','\x06','\x40','\xB9',
'\x63','\x06','\x40','\xB9',
'\x83','\x06','\x40','\xB9',
'\xA3','\x06','\x40','\xB9',
'\xC3','\x06','\x40','\xB9',
'\xE3','\x06','\x40','\xB9',
'\x03','\x07','\x40','\xB9',
'\x23','\x07','\x40','\xB9',
'\x43','\x07','\x40','\xB9',
'\x63','\x07','\x40','\xB9',
'\x83','\x07','\x40','\xB9',
'\xA3','\x07','\x40','\xB9',
'\xC3','\x07','\x40','\xB9',
'\x04','\x04','\x40','\xB9',
'\x24','\x04','\x40','\xB9',
'\x44','\x04','\x40','\xB9',
'\x64','\x04','\x40','\xB9',
'\x84','\x04','\x40','\xB9',
'\xA4','\x04','\x40','\xB9',
'\xC4','\x04','\x40','\xB9',
'\xE4','\x04','\x40','\xB9',
'\x04','\x05','\x40','\xB9',
'\x24','\x05','\x40','\xB9',
'\x44','\x05','\x40','\xB9',
'\x64','\x05','\x40','\xB9',
'\x84','\x05','\x40','\xB9',
'\xA4','\x05','\x40','\xB9',
'\xC4','\x05','\x40','\xB9',
'\xE4','\x05','\x40','\xB9',
'\x04','\x06','\x40','\xB9',
'\x24','\x06','\x40','\xB9',
'\x44','\x06','\x40','\xB9',
'\x64','\x06','\x40','\xB9',
'\x84','\x06','\x40','\xB9',
'\xA4','\x06','\x40','\xB9',
'\xC4','\x06','\x40','\xB9',
'\xE4','\x06','\x40','\xB9',
'\x04','\x07','\x40','\xB9',
'\x24','\x07','\x40','\xB9',
'\x44','\x07','\x40','\xB9',
'\x64','\x07','\x40','\xB9',
'\x84','\x07','\x40','\xB9',
'\xA4','\x07','\x40','\xB9',
'\xC4','\x07','\x40','\xB9',
'\x05','\x04','\x40','\xB9',
'\x25','\x04','\x40','\xB9',
'\x45','\x04','\x40','\xB9',
'\x65','\x04','\x40','\xB9',
'\x85','\x04','\x40','\xB9',
'\xA5','\x04','\x40','\xB9',
'\xC5','\x04','\x40','\xB9',
'\xE5','\x04','\x40','\xB9',
'\x05','\x05','\x40','\xB9',
'\x25','\x05','\x40','\xB9',
'\x45','\x05','\x40','\xB9',
'\x65','\x05','\x40','\xB9',
'\x85','\x05','\x40','\xB9',
'\xA5','\x05','\x40','\xB9',
'\xC5','\x05','\x40','\xB9',
'\xE5','\x05','\x40','\xB9',
'\x05','\x06','\x40','\xB9',
'\x25','\x06','\x40','\xB9',
'\x45','\x06','\x40','\xB9',
'\x65','\x06','\x40','\xB9',
'\x85','\x06','\x40','\xB9',
'\xA5','\x06','\x40','\xB9',
'\xC5','\x06','\x40','\xB9',
'\xE5','\x06','\x40','\xB9',
'\x05','\x07','\x40','\xB9',
'\x25','\x07','\x40','\xB9',
'\x45','\x07','\x40','\xB9',
'\x65','\x07','\x40','\xB9',
'\x85','\x07','\x40','\xB9',
'\xA5','\x07','\x40','\xB9',
'\xC5','\x07','\x40','\xB9',
'\x06','\x04','\x40','\xB9',
'\x26','\x04','\x40','\xB9',
'\x46','\x04','\x40','\xB9',
'\x66','\x04','\x40','\xB9',
'\x86','\x04','\x40','\xB9',
'\xA6','\x04','\x40','\xB9',
'\xC6','\x04','\x40','\xB9',
'\xE6','\x04','\x40','\xB9',
'\x06','\x05','\x40','\xB9',
'\x26','\x05','\x40','\xB9',
'\x46','\x05','\x40','\xB9',
'\x66','\x05','\x40','\xB9',
'\x86','\x05','\x40','\xB9',
'\xA6','\x05','\x40','\xB9',
'\xC6','\x05','\x40','\xB9',
'\xE6','\x05','\x40','\xB9',
'\x06','\x06','\x40','\xB9',
'\x26','\x06','\x40','\xB9',
'\x46','\x06','\x40','\xB9',
'\x66','\x06','\x40','\xB9',
'\x86','\x06','\x40','\xB9',
'\xA6','\x06','\x40','\xB9',
'\xC6','\x06','\x40','\xB9',
'\xE6','\x06','\x40','\xB9',
'\x06','\x07','\x40','\xB9',
'\x26','\x07','\x40','\xB9',
'\x46','\x07','\x40','\xB9',
'\x66','\x07','\x40','\xB9',
'\x86','\x07','\x40','\xB9',
'\xA6','\x07','\x40','\xB9',
'\xC6','\x07','\x40','\xB9',
'\x07','\x04','\x40','\xB9',
'\x27','\x04','\x40','\xB9',
'\x47','\x04','\x40','\xB9',
'\x67','\x04','\x40','\xB9',
'\x87','\x04','\x40','\xB9',
'\xA7','\x04','\x40','\xB9',
'\xC7','\x04','\x40','\xB9',
'\xE7','\x04','\x40','\xB9',
'\x07','\x05','\x40','\xB9',
'\x27','\x05','\x40','\xB9',
'\x47','\x05','\x40','\xB9',
'\x67','\x05','\x40','\xB9',
'\x87','\x05','\x40','\xB9',
'\xA7','\x05','\x40','\xB9',
'\xC7','\x05','\x40','\xB9',
'\xE7','\x05','\x40','\xB9',
'\x07','\x06','\x40','\xB9',
'\x27','\x06','\x40','\xB9',
'\x47','\x06','\x40','\xB9',
'\x67','\x06','\x40','\xB9',
'\x87','\x06','\x40','\xB9',
'\xA7','\x06','\x40','\xB9',
'\xC7','\x06','\x40','\xB9',
'\xE7','\x06','\x40','\xB9',
'\x07','\x07','\x40','\xB9',
'\x27','\x07','\x40','\xB9',
'\x47','\x07','\x40','\xB9',
'\x67','\x07','\x40','\xB9',
'\x87','\x07','\x40','\xB9',
'\xA7','\x07','\x40','\xB9',
'\xC7','\x07','\x40','\xB9',
'\x08','\x04','\x40','\xB9',
'\x28','\x04','\x40','\xB9',
'\x48','\x04','\x40','\xB9',
'\x68','\x04','\x40','\xB9',
'\x88','\x04','\x40','\xB9',
'\xA8','\x04','\x40','\xB9',
'\xC8','\x04','\x40','\xB9',
'\xE8','\x04','\x40','\xB9',
'\x08','\x05','\x40','\xB9',
'\x28','\x05','\x40','\xB9',
'\x48','\x05','\x40','\xB9',
'\x68','\x05','\x40','\xB9',
'\x88','\x05','\x40','\xB9',
'\xA8','\x05','\x40','\xB9',
'\xC8','\x05','\x40','\xB9',
'\xE8','\x05','\x40','\xB9',
'\x08','\x06','\x40','\xB9',
'\x28','\x06','\x40','\xB9',
'\x48','\x06','\x40','\xB9',
'\x68','\x06','\x40','\xB9',
'\x88','\x06','\x40','\xB9',
'\xA8','\x06','\x40','\xB9',
'\xC8','\x06','\x40','\xB9',
'\xE8','\x06','\x40','\xB9',
'\x08','\x07','\x40','\xB9',
'\x28','\x07','\x40','\xB9',
'\x48','\x07','\x40','\xB9',
'\x68','\x07','\x40','\xB9',
'\x88','\x07','\x40','\xB9',
'\xA8','\x07','\x40','\xB9',
'\xC8','\x07','\x40','\xB9',
'\x09','\x04','\x40','\xB9',
'\x29','\x04','\x40','\xB9',
'\x49','\x04','\x40','\xB9',
'\x69','\x04','\x40','\xB9',
'\x89','\x04','\x40','\xB9',
'\xA9','\x04','\x40','\xB9',
'\xC9','\x04','\x40','\xB9',
'\xE9','\x04','\x40','\xB9',
'\x09','\x05','\x40','\xB9',
'\x29','\x05','\x40','\xB9',
'\x49','\x05','\x40','\xB9',
'\x69','\x05','\x40','\xB9',
'\x89','\x05','\x40','\xB9',
'\xA9','\x05','\x40','\xB9',
'\xC9','\x05','\x40','\xB9',
'\xE9','\x05','\x40','\xB9',
'\x09','\x06','\x40','\xB9',
'\x29','\x06','\x40','\xB9',
'\x49','\x06','\x40','\xB9',
'\x69','\x06','\x40','\xB9',
'\x89','\x06','\x40','\xB9',
'\xA9','\x06','\x40','\xB9',
'\xC9','\x06','\x40','\xB9',
'\xE9','\x06','\x40','\xB9',
'\x09','\x07','\x40','\xB9',
'\x29','\x07','\x40','\xB9',
'\x49','\x07','\x40','\xB9',
'\x69','\x07','\x40','\xB9',
'\x89','\x07','\x40','\xB9',
'\xA9','\x07','\x40','\xB9',
'\xC9','\x07','\x40','\xB9',
'\x0A','\x04','\x40','\xB9',
'\x2A','\x04','\x40','\xB9',
'\x4A','\x04','\x40','\xB9',
'\x6A','\x04','\x40','\xB9',
'\x8A','\x04','\x40','\xB9',
'\xAA','\x04','\x40','\xB9',
'\xCA','\x04','\x40','\xB9',
'\xEA','\x04','\x40','\xB9',
'\x0A','\x05','\x40','\xB9',
'\x2A','\x05','\x40','\xB9',
'\x4A','\x05','\x40','\xB9',
'\x6A','\x05','\x40','\xB9',
'\x8A','\x05','\x40','\xB9',
'\xAA','\x05','\x40','\xB9',
'\xCA','\x05','\x40','\xB9',
'\xEA','\x05','\x40','\xB9',
'\x0A','\x06','\x40','\xB9',
'\x2A','\x06','\x40','\xB9',
'\x4A','\x06','\x40','\xB9',
'\x6A','\x06','\x40','\xB9',
'\x8A','\x06','\x40','\xB9',
'\xAA','\x06','\x40','\xB9',
'\xCA','\x06','\x40','\xB9',
'\xEA','\x06','\x40','\xB9',
'\x0A','\x07','\x40','\xB9',
'\x2A','\x07','\x40','\xB9',
'\x4A','\x07','\x40','\xB9',
'\x6A','\x07','\x40','\xB9',
'\x8A','\x07','\x40','\xB9',
'\xAA','\x07','\x40','\xB9',
'\xCA','\x07','\x40','\xB9',
'\x0B','\x04','\x40','\xB9',
'\x2B','\x04','\x40','\xB9',
'\x4B','\x04','\x40','\xB9',
'\x6B','\x04','\x40','\xB9',
'\x8B','\x04','\x40','\xB9',
'\xAB','\x04','\x40','\xB9',
'\xCB','\x04','\x40','\xB9',
'\xEB','\x04','\x40','\xB9',
'\x0B','\x05','\x40','\xB9',
'\x2B','\x05','\x40','\xB9',
'\x4B','\x05','\x40','\xB9',
'\x6B','\x05','\x40','\xB9',
'\x8B','\x05','\x40','\xB9',
'\xAB','\x05','\x40','\xB9',
'\xCB','\x05','\x40','\xB9',
'\xEB','\x05','\x40','\xB9',
'\x0B','\x06','\x40','\xB9',
'\x2B','\x06','\x40','\xB9',
'\x4B','\x06','\x40','\xB9',
'\x6B','\x06','\x40','\xB9',
'\x8B','\x06','\x40','\xB9',
'\xAB','\x06','\x40','\xB9',
'\xCB','\x06','\x40','\xB9',
'\xEB','\x06','\x40','\xB9',
'\x0B','\x07','\x40','\xB9',
'\x2B','\x07','\x40','\xB9',
'\x4B','\x07','\x40','\xB9',
'\x6B','\x07','\x40','\xB9',
'\x8B','\x07','\x40','\xB9',
'\xAB','\x07','\x40','\xB9',
'\xCB','\x07','\x40','\xB9',
'\x0C','\x04','\x40','\xB9',
'\x2C','\x04','\x40','\xB9',
'\x4C','\x04','\x40','\xB9',
'\x6C','\x04','\x40','\xB9',
'\x8C','\x04','\x40','\xB9',
'\xAC','\x04','\x40','\xB9',
'\xCC','\x04','\x40','\xB9',
'\xEC','\x04','\x40','\xB9',
'\x0C','\x05','\x40','\xB9',
'\x2C','\x05','\x40','\xB9',
'\x4C','\x05','\x40','\xB9',
'\x6C','\x05','\x40','\xB9',
'\x8C','\x05','\x40','\xB9',
'\xAC','\x05','\x40','\xB9',
'\xCC','\x05','\x40','\xB9',
'\xEC','\x05','\x40','\xB9',
'\x0C','\x06','\x40','\xB9',
'\x2C','\x06','\x40','\xB9',
'\x4C','\x06','\x40','\xB9',
'\x6C','\x06','\x40','\xB9',
'\x8C','\x06','\x40','\xB9',
'\xAC','\x06','\x40','\xB9',
'\xCC','\x06','\x40','\xB9',
'\xEC','\x06','\x40','\xB9',
'\x0C','\x07','\x40','\xB9',
'\x2C','\x07','\x40','\xB9',
'\x4C','\x07','\x40','\xB9',
'\x6C','\x07','\x40','\xB9',
'\x8C','\x07','\x40','\xB9',
'\xAC','\x07','\x40','\xB9',
'\xCC','\x07','\x40','\xB9',
'\x0D','\x04','\x40','\xB9',
'\x2D','\x04','\x40','\xB9',
'\x4D','\x04','\x40','\xB9',
'\x6D','\x04','\x40','\xB9',
'\x8D','\x04','\x40','\xB9',
'\xAD','\x04','\x40','\xB9',
'\xCD','\x04','\x40','\xB9',
'\xED','\x04','\x40','\xB9',
'\x0D','\x05','\x40','\xB9',
'\x2D','\x05','\x40','\xB9',
'\x4D','\x05','\x40','\xB9',
'\x6D','\x05','\x40','\xB9',
'\x8D','\x05','\x40','\xB9',
'\xAD','\x05','\x40','\xB9',
'\xCD','\x05','\x40','\xB9',
'\xED','\x05','\x40','\xB9',
'\x0D','\x06','\x40','\xB9',
'\x2D','\x06','\x40','\xB9',
'\x4D','\x06','\x40','\xB9',
'\x6D','\x06','\x40','\xB9',
'\x8D','\x06','\x40','\xB9',
'\xAD','\x06','\x40','\xB9',
'\xCD','\x06','\x40','\xB9',
'\xED','\x06','\x40','\xB9',
'\x0D','\x07','\x40','\xB9',
'\x2D','\x07','\x40','\xB9',
'\x4D','\x07','\x40','\xB9',
'\x6D','\x07','\x40','\xB9',
'\x8D','\x07','\x40','\xB9',
'\xAD','\x07','\x40','\xB9',
'\xCD','\x07','\x40','\xB9',
'\x0E','\x04','\x40','\xB9',
'\x2E','\x04','\x40','\xB9',
'\x4E','\x04','\x40','\xB9',
'\x6E','\x04','\x40','\xB9',
'\x8E','\x04','\x40','\xB9',
'\xAE','\x04','\x40','\xB9',
'\xCE','\x04','\x40','\xB9',
'\xEE','\x04','\x40','\xB9',
'\x0E','\x05','\x40','\xB9',
'\x2E','\x05','\x40','\xB9',
'\x4E','\x05','\x40','\xB9',
'\x6E','\x05','\x40','\xB9',
'\x8E','\x05','\x40','\xB9',
'\xAE','\x05','\x40','\xB9',
'\xCE','\x05','\x40','\xB9',
'\xEE','\x05','\x40','\xB9',
'\x0E','\x06','\x40','\xB9',
'\x2E','\x06','\x40','\xB9',
'\x4E','\x06','\x40','\xB9',
'\x6E','\x06','\x40','\xB9',
'\x8E','\x06','\x40','\xB9',
'\xAE','\x06','\x40','\xB9',
'\xCE','\x06','\x40','\xB9',
'\xEE','\x06','\x40','\xB9',
'\x0E','\x07','\x40','\xB9',
'\x2E','\x07','\x40','\xB9',
'\x4E','\x07','\x40','\xB9',
'\x6E','\x07','\x40','\xB9',
'\x8E','\x07','\x40','\xB9',
'\xAE','\x07','\x40','\xB9',
'\xCE','\x07','\x40','\xB9',
'\x0F','\x04','\x40','\xB9',
'\x2F','\x04','\x40','\xB9',
'\x4F','\x04','\x40','\xB9',
'\x6F','\x04','\x40','\xB9',
'\x8F','\x04','\x40','\xB9',
'\xAF','\x04','\x40','\xB9',
'\xCF','\x04','\x40','\xB9',
'\xEF','\x04','\x40','\xB9',
'\x0F','\x05','\x40','\xB9',
'\x2F','\x05','\x40','\xB9',
'\x4F','\x05','\x40','\xB9',
'\x6F','\x05','\x40','\xB9',
'\x8F','\x05','\x40','\xB9',
'\xAF','\x05','\x40','\xB9',
'\xCF','\x05','\x40','\xB9',
'\xEF','\x05','\x40','\xB9',
'\x0F','\x06','\x40','\xB9',
'\x2F','\x06','\x40','\xB9',
'\x4F','\x06','\x40','\xB9',
'\x6F','\x06','\x40','\xB9',
'\x8F','\x06','\x40','\xB9',
'\xAF','\x06','\x40','\xB9',
'\xCF','\x06','\x40','\xB9',
'\xEF','\x06','\x40','\xB9',
'\x0F','\x07','\x40','\xB9',
'\x2F','\x07','\x40','\xB9',
'\x4F','\x07','\x40','\xB9',
'\x6F','\x07','\x40','\xB9',
'\x8F','\x07','\x40','\xB9',
'\xAF','\x07','\x40','\xB9',
'\xCF','\x07','\x40','\xB9',
'\x10','\x04','\x40','\xB9',
'\x30','\x04','\x40','\xB9',
'\x50','\x04','\x40','\xB9',
'\x70','\x04','\x40','\xB9',
'\x90','\x04','\x40','\xB9',
'\xB0','\x04','\x40','\xB9',
'\xD0','\x04','\x40','\xB9',
'\xF0','\x04','\x40','\xB9',
'\x10','\x05','\x40','\xB9',
'\x30','\x05','\x40','\xB9',
'\x50','\x05','\x40','\xB9',
'\x70','\x05','\x40','\xB9',
'\x90','\x05','\x40','\xB9',
'\xB0','\x05','\x40','\xB9',
'\xD0','\x05','\x40','\xB9',
'\xF0','\x05','\x40','\xB9',
'\x10','\x06','\x40','\xB9',
'\x30','\x06','\x40','\xB9',
'\x50','\x06','\x40','\xB9',
'\x70','\x06','\x40','\xB9',
'\x90','\x06','\x40','\xB9',
'\xB0','\x06','\x40','\xB9',
'\xD0','\x06','\x40','\xB9',
'\xF0','\x06','\x40','\xB9',
'\x10','\x07','\x40','\xB9',
'\x30','\x07','\x40','\xB9',
'\x50','\x07','\x40','\xB9',
'\x70','\x07','\x40','\xB9',
'\x90','\x07','\x40','\xB9',
'\xB0','\x07','\x40','\xB9',
'\xD0','\x07','\x40','\xB9',
'\x11','\x04','\x40','\xB9',
'\x31','\x04','\x40','\xB9',
'\x51','\x04','\x40','\xB9',
'\x71','\x04','\x40','\xB9',
'\x91','\x04','\x40','\xB9',
'\xB1','\x04','\x40','\xB9',
'\xD1','\x04','\x40','\xB9',
'\xF1','\x04','\x40','\xB9',
'\x11','\x05','\x40','\xB9',
'\x31','\x05','\x40','\xB9',
'\x51','\x05','\x40','\xB9',
'\x71','\x05','\x40','\xB9',
'\x91','\x05','\x40','\xB9',
'\xB1','\x05','\x40','\xB9',
'\xD1','\x05','\x40','\xB9',
'\xF1','\x05','\x40','\xB9',
'\x11','\x06','\x40','\xB9',
'\x31','\x06','\x40','\xB9',
'\x51','\x06','\x40','\xB9',
'\x71','\x06','\x40','\xB9',
'\x91','\x06','\x40','\xB9',
'\xB1','\x06','\x40','\xB9',
'\xD1','\x06','\x40','\xB9',
'\xF1','\x06','\x40','\xB9',
'\x11','\x07','\x40','\xB9',
'\x31','\x07','\x40','\xB9',
'\x51','\x07','\x40','\xB9',
'\x71','\x07','\x40','\xB9',
'\x91','\x07','\x40','\xB9',
'\xB1','\x07','\x40','\xB9',
'\xD1','\x07','\x40','\xB9',
'\x12','\x04','\x40','\xB9',
'\x32','\x04','\x40','\xB9',
'\x52','\x04','\x40','\xB9',
'\x72','\x04','\x40','\xB9',
'\x92','\x04','\x40','\xB9',
'\xB2','\x04','\x40','\xB9',
'\xD2','\x04','\x40','\xB9',
'\xF2','\x04','\x40','\xB9',
'\x12','\x05','\x40','\xB9',
'\x32','\x05','\x40','\xB9',
'\x52','\x05','\x40','\xB9',
'\x72','\x05','\x40','\xB9',
'\x92','\x05','\x40','\xB9',
'\xB2','\x05','\x40','\xB9',
'\xD2','\x05','\x40','\xB9',
'\xF2','\x05','\x40','\xB9',
'\x12','\x06','\x40','\xB9',
'\x32','\x06','\x40','\xB9',
'\x52','\x06','\x40','\xB9',
'\x72','\x06','\x40','\xB9',
'\x92','\x06','\x40','\xB9',
'\xB2','\x06','\x40','\xB9',
'\xD2','\x06','\x40','\xB9',
'\xF2','\x06','\x40','\xB9',
'\x12','\x07','\x40','\xB9',
'\x32','\x07','\x40','\xB9',
'\x52','\x07','\x40','\xB9',
'\x72','\x07','\x40','\xB9',
'\x92','\x07','\x40','\xB9',
'\xB2','\x07','\x40','\xB9',
'\xD2','\x07','\x40','\xB9',
'\x13','\x04','\x40','\xB9',
'\x33','\x04','\x40','\xB9',
'\x53','\x04','\x40','\xB9',
'\x73','\x04','\x40','\xB9',
'\x93','\x04','\x40','\xB9',
'\xB3','\x04','\x40','\xB9',
'\xD3','\x04','\x40','\xB9',
'\xF3','\x04','\x40','\xB9',
'\x13','\x05','\x40','\xB9',
'\x33','\x05','\x40','\xB9',
'\x53','\x05','\x40','\xB9',
'\x73','\x05','\x40','\xB9',
'\x93','\x05','\x40','\xB9',
'\xB3','\x05','\x40','\xB9',
'\xD3','\x05','\x40','\xB9',
'\xF3','\x05','\x40','\xB9',
'\x13','\x06','\x40','\xB9',
'\x33','\x06','\x40','\xB9',
'\x53','\x06','\x40','\xB9',
'\x73','\x06','\x40','\xB9',
'\x93','\x06','\x40','\xB9',
'\xB3','\x06','\x40','\xB9',
'\xD3','\x06','\x40','\xB9',
'\xF3','\x06','\x40','\xB9',
'\x13','\x07','\x40','\xB9',
'\x33','\x07','\x40','\xB9',
'\x53','\x07','\x40','\xB9',
'\x73','\x07','\x40','\xB9',
'\x93','\x07','\x40','\xB9',
'\xB3','\x07','\x40','\xB9',
'\xD3','\x07','\x40','\xB9',
'\x14','\x04','\x40','\xB9',
'\x34','\x04','\x40','\xB9',
'\x54','\x04','\x40','\xB9',
'\x74','\x04','\x40','\xB9',
'\x94','\x04','\x40','\xB9',
'\xB4','\x04','\x40','\xB9',
'\xD4','\x04','\x40','\xB9',
'\xF4','\x04','\x40','\xB9',
'\x14','\x05','\x40','\xB9',
'\x34','\x05','\x40','\xB9',
'\x54','\x05','\x40','\xB9',
'\x74','\x05','\x40','\xB9',
'\x94','\x05','\x40','\xB9',
'\xB4','\x05','\x40','\xB9',
'\xD4','\x05','\x40','\xB9',
'\xF4','\x05','\x40','\xB9',
'\x14','\x06','\x40','\xB9',
'\x34','\x06','\x40','\xB9',
'\x54','\x06','\x40','\xB9',
'\x74','\x06','\x40','\xB9',
'\x94','\x06','\x40','\xB9',
'\xB4','\x06','\x40','\xB9',
'\xD4','\x06','\x40','\xB9',
'\xF4','\x06','\x40','\xB9',
'\x14','\x07','\x40','\xB9',
'\x34','\x07','\x40','\xB9',
'\x54','\x07','\x40','\xB9',
'\x74','\x07','\x40','\xB9',
'\x94','\x07','\x40','\xB9',
'\xB4','\x07','\x40','\xB9',
'\xD4','\x07','\x40','\xB9',
'\x15','\x04','\x40','\xB9',
'\x35','\x04','\x40','\xB9',
'\x55','\x04','\x40','\xB9',
'\x75','\x04','\x40','\xB9',
'\x95','\x04','\x40','\xB9',
'\xB5','\x04','\x40','\xB9',
'\xD5','\x04','\x40','\xB9',
'\xF5','\x04','\x40','\xB9',
'\x15','\x05','\x40','\xB9',
'\x35','\x05','\x40','\xB9',
'\x55','\x05','\x40','\xB9',
'\x75','\x05','\x40','\xB9',
'\x95','\x05','\x40','\xB9',
'\xB5','\x05','\x40','\xB9',
'\xD5','\x05','\x40','\xB9',
'\xF5','\x05','\x40','\xB9',
'\x15','\x06','\x40','\xB9',
'\x35','\x06','\x40','\xB9',
'\x55','\x06','\x40','\xB9',
'\x75','\x06','\x40','\xB9',
'\x95','\x06','\x40','\xB9',
'\xB5','\x06','\x40','\xB9',
'\xD5','\x06','\x40','\xB9',
'\xF5','\x06','\x40','\xB9',
'\x15','\x07','\x40','\xB9',
'\x35','\x07','\x40','\xB9',
'\x55','\x07','\x40','\xB9',
'\x75','\x07','\x40','\xB9',
'\x95','\x07','\x40','\xB9',
'\xB5','\x07','\x40','\xB9',
'\xD5','\x07','\x40','\xB9',
'\x16','\x04','\x40','\xB9',
'\x36','\x04','\x40','\xB9',
'\x56','\x04','\x40','\xB9',
'\x76','\x04','\x40','\xB9',
'\x96','\x04','\x40','\xB9',
'\xB6','\x04','\x40','\xB9',
'\xD6','\x04','\x40','\xB9',
'\xF6','\x04','\x40','\xB9',
'\x16','\x05','\x40','\xB9',
'\x36','\x05','\x40','\xB9',
'\x56','\x05','\x40','\xB9',
'\x76','\x05','\x40','\xB9',
'\x96','\x05','\x40','\xB9',
'\xB6','\x05','\x40','\xB9',
'\xD6','\x05','\x40','\xB9',
'\xF6','\x05','\x40','\xB9',
'\x16','\x06','\x40','\xB9',
'\x36','\x06','\x40','\xB9',
'\x56','\x06','\x40','\xB9',
'\x76','\x06','\x40','\xB9',
'\x96','\x06','\x40','\xB9',
'\xB6','\x06','\x40','\xB9',
'\xD6','\x06','\x40','\xB9',
'\xF6','\x06','\x40','\xB9',
'\x16','\x07','\x40','\xB9',
'\x36','\x07','\x40','\xB9',
'\x56','\x07','\x40','\xB9',
'\x76','\x07','\x40','\xB9',
'\x96','\x07','\x40','\xB9',
'\xB6','\x07','\x40','\xB9',
'\xD6','\x07','\x40','\xB9',
'\x17','\x04','\x40','\xB9',
'\x37','\x04','\x40','\xB9',
'\x57','\x04','\x40','\xB9',
'\x77','\x04','\x40','\xB9',
'\x97','\x04','\x40','\xB9',
'\xB7','\x04','\x40','\xB9',
'\xD7','\x04','\x40','\xB9',
'\xF7','\x04','\x40','\xB9',
'\x17','\x05','\x40','\xB9',
'\x37','\x05','\x40','\xB9',
'\x57','\x05','\x40','\xB9',
'\x77','\x05','\x40','\xB9',
'\x97','\x05','\x40','\xB9',
'\xB7','\x05','\x40','\xB9',
'\xD7','\x05','\x40','\xB9',
'\xF7','\x05','\x40','\xB9',
'\x17','\x06','\x40','\xB9',
'\x37','\x06','\x40','\xB9',
'\x57','\x06','\x40','\xB9',
'\x77','\x06','\x40','\xB9',
'\x97','\x06','\x40','\xB9',
'\xB7','\x06','\x40','\xB9',
'\xD7','\x06','\x40','\xB9',
'\xF7','\x06','\x40','\xB9',
'\x17','\x07','\x40','\xB9',
'\x37','\x07','\x40','\xB9',
'\x57','\x07','\x40','\xB9',
'\x77','\x07','\x40','\xB9',
'\x97','\x07','\x40','\xB9',
'\xB7','\x07','\x40','\xB9',
'\xD7','\x07','\x40','\xB9',
'\x18','\x04','\x40','\xB9',
'\x38','\x04','\x40','\xB9',
'\x58','\x04','\x40','\xB9',
'\x78','\x04','\x40','\xB9',
'\x98','\x04','\x40','\xB9',
'\xB8','\x04','\x40','\xB9',
'\xD8','\x04','\x40','\xB9',
'\xF8','\x04','\x40','\xB9',
'\x18','\x05','\x40','\xB9',
'\x38','\x05','\x40','\xB9',
'\x58','\x05','\x40','\xB9',
'\x78','\x05','\x40','\xB9',
'\x98','\x05','\x40','\xB9',
'\xB8','\x05','\x40','\xB9',
'\xD8','\x05','\x40','\xB9',
'\xF8','\x05','\x40','\xB9',
'\x18','\x06','\x40','\xB9',
'\x38','\x06','\x40','\xB9',
'\x58','\x06','\x40','\xB9',
'\x78','\x06','\x40','\xB9',
'\x98','\x06','\x40','\xB9',
'\xB8','\x06','\x40','\xB9',
'\xD8','\x06','\x40','\xB9',
'\xF8','\x06','\x40','\xB9',
'\x18','\x07','\x40','\xB9',
'\x38','\x07','\x40','\xB9',
'\x58','\x07','\x40','\xB9',
'\x78','\x07','\x40','\xB9',
'\x98','\x07','\x40','\xB9',
'\xB8','\x07','\x40','\xB9',
'\xD8','\x07','\x40','\xB9',
'\x19','\x04','\x40','\xB9',
'\x39','\x04','\x40','\xB9',
'\x59','\x04','\x40','\xB9',
'\x79','\x04','\x40','\xB9',
'\x99','\x04','\x40','\xB9',
'\xB9','\x04','\x40','\xB9',
'\xD9','\x04','\x40','\xB9',
'\xF9','\x04','\x40','\xB9',
'\x19','\x05','\x40','\xB9',
'\x39','\x05','\x40','\xB9',
'\x59','\x05','\x40','\xB9',
'\x79','\x05','\x40','\xB9',
'\x99','\x05','\x40','\xB9',
'\xB9','\x05','\x40','\xB9',
'\xD9','\x05','\x40','\xB9',
'\xF9','\x05','\x40','\xB9',
'\x19','\x06','\x40','\xB9',
'\x39','\x06','\x40','\xB9',
'\x59','\x06','\x40','\xB9',
'\x79','\x06','\x40','\xB9',
'\x99','\x06','\x40','\xB9',
'\xB9','\x06','\x40','\xB9',
'\xD9','\x06','\x40','\xB9',
'\xF9','\x06','\x40','\xB9',
'\x19','\x07','\x40','\xB9',
'\x39','\x07','\x40','\xB9',
'\x59','\x07','\x40','\xB9',
'\x79','\x07','\x40','\xB9',
'\x99','\x07','\x40','\xB9',
'\xB9','\x07','\x40','\xB9',
'\xD9','\x07','\x40','\xB9',
'\x1A','\x04','\x40','\xB9',
'\x3A','\x04','\x40','\xB9',
'\x5A','\x04','\x40','\xB9',
'\x7A','\x04','\x40','\xB9',
'\x9A','\x04','\x40','\xB9',
'\xBA','\x04','\x40','\xB9',
'\xDA','\x04','\x40','\xB9',
'\xFA','\x04','\x40','\xB9',
'\x1A','\x05','\x40','\xB9',
'\x3A','\x05','\x40','\xB9',
'\x5A','\x05','\x40','\xB9',
'\x7A','\x05','\x40','\xB9',
'\x9A','\x05','\x40','\xB9',
'\xBA','\x05','\x40','\xB9',
'\xDA','\x05','\x40','\xB9',
'\xFA','\x05','\x40','\xB9',
'\x1A','\x06','\x40','\xB9',
'\x3A','\x06','\x40','\xB9',
'\x5A','\x06','\x40','\xB9',
'\x7A','\x06','\x40','\xB9',
'\x9A','\x06','\x40','\xB9',
'\xBA','\x06','\x40','\xB9',
'\xDA','\x06','\x40','\xB9',
'\xFA','\x06','\x40','\xB9',
'\x1A','\x07','\x40','\xB9',
'\x3A','\x07','\x40','\xB9',
'\x5A','\x07','\x40','\xB9',
'\x7A','\x07','\x40','\xB9',
'\x9A','\x07','\x40','\xB9',
'\xBA','\x07','\x40','\xB9',
'\xDA','\x07','\x40','\xB9',
'\x1B','\x04','\x40','\xB9',
'\x3B','\x04','\x40','\xB9',
'\x5B','\x04','\x40','\xB9',
'\x7B','\x04','\x40','\xB9',
'\x9B','\x04','\x40','\xB9',
'\xBB','\x04','\x40','\xB9',
'\xDB','\x04','\x40','\xB9',
'\xFB','\x04','\x40','\xB9',
'\x1B','\x05','\x40','\xB9',
'\x3B','\x05','\x40','\xB9',
'\x5B','\x05','\x40','\xB9',
'\x7B','\x05','\x40','\xB9',
'\x9B','\x05','\x40','\xB9',
'\xBB','\x05','\x40','\xB9',
'\xDB','\x05','\x40','\xB9',
'\xFB','\x05','\x40','\xB9',
'\x1B','\x06','\x40','\xB9',
'\x3B','\x06','\x40','\xB9',
'\x5B','\x06','\x40','\xB9',
'\x7B','\x06','\x40','\xB9',
'\x9B','\x06','\x40','\xB9',
'\xBB','\x06','\x40','\xB9',
'\xDB','\x06','\x40','\xB9',
'\xFB','\x06','\x40','\xB9',
'\x1B','\x07','\x40','\xB9',
'\x3B','\x07','\x40','\xB9',
'\x5B','\x07','\x40','\xB9',
'\x7B','\x07','\x40','\xB9',
'\x9B','\x07','\x40','\xB9',
'\xBB','\x07','\x40','\xB9',
'\xDB','\x07','\x40','\xB9',
'\x1C','\x04','\x40','\xB9',
'\x3C','\x04','\x40','\xB9',
'\x5C','\x04','\x40','\xB9',
'\x7C','\x04','\x40','\xB9',
'\x9C','\x04','\x40','\xB9',
'\xBC','\x04','\x40','\xB9',
'\xDC','\x04','\x40','\xB9',
'\xFC','\x04','\x40','\xB9',
'\x1C','\x05','\x40','\xB9',
'\x3C','\x05','\x40','\xB9',
'\x5C','\x05','\x40','\xB9',
'\x7C','\x05','\x40','\xB9',
'\x9C','\x05','\x40','\xB9',
'\xBC','\x05','\x40','\xB9',
'\xDC','\x05','\x40','\xB9',
'\xFC','\x05','\x40','\xB9',
'\x1C','\x06','\x40','\xB9',
'\x3C','\x06','\x40','\xB9',
'\x5C','\x06','\x40','\xB9',
'\x7C','\x06','\x40','\xB9',
'\x9C','\x06','\x40','\xB9',
'\xBC','\x06','\x40','\xB9',
'\xDC','\x06','\x40','\xB9',
'\xFC','\x06','\x40','\xB9',
'\x1C','\x07','\x40','\xB9',
'\x3C','\x07','\x40','\xB9',
'\x5C','\x07','\x40','\xB9',
'\x7C','\x07','\x40','\xB9',
'\x9C','\x07','\x40','\xB9',
'\xBC','\x07','\x40','\xB9',
'\xDC','\x07','\x40','\xB9',
'\x1D','\x04','\x40','\xB9',
'\x3D','\x04','\x40','\xB9',
'\x5D','\x04','\x40','\xB9',
'\x7D','\x04','\x40','\xB9',
'\x9D','\x04','\x40','\xB9',
'\xBD','\x04','\x40','\xB9',
'\xDD','\x04','\x40','\xB9',
'\xFD','\x04','\x40','\xB9',
'\x1D','\x05','\x40','\xB9',
'\x3D','\x05','\x40','\xB9',
'\x5D','\x05','\x40','\xB9',
'\x7D','\x05','\x40','\xB9',
'\x9D','\x05','\x40','\xB9',
'\xBD','\x05','\x40','\xB9',
'\xDD','\x05','\x40','\xB9',
'\xFD','\x05','\x40','\xB9',
'\x1D','\x06','\x40','\xB9',
'\x3D','\x06','\x40','\xB9',
'\x5D','\x06','\x40','\xB9',
'\x7D','\x06','\x40','\xB9',
'\x9D','\x06','\x40','\xB9',
'\xBD','\x06','\x40','\xB9',
'\xDD','\x06','\x40','\xB9',
'\xFD','\x06','\x40','\xB9',
'\x1D','\x07','\x40','\xB9',
'\x3D','\x07','\x40','\xB9',
'\x5D','\x07','\x40','\xB9',
'\x7D','\x07','\x40','\xB9',
'\x9D','\x07','\x40','\xB9',
'\xBD','\x07','\x40','\xB9',
'\xDD','\x07','\x40','\xB9',
'\x1E','\x04','\x40','\xB9',
'\x3E','\x04','\x40','\xB9',
'\x5E','\x04','\x40','\xB9',
'\x7E','\x04','\x40','\xB9',
'\x9E','\x04','\x40','\xB9',
'\xBE','\x04','\x40','\xB9',
'\xDE','\x04','\x40','\xB9',
'\xFE','\x04','\x40','\xB9',
'\x1E','\x05','\x40','\xB9',
'\x3E','\x05','\x40','\xB9',
'\x5E','\x05','\x40','\xB9',
'\x7E','\x05','\x40','\xB9',
'\x9E','\x05','\x40','\xB9',
'\xBE','\x05','\x40','\xB9',
'\xDE','\x05','\x40','\xB9',
'\xFE','\x05','\x40','\xB9',
'\x1E','\x06','\x40','\xB9',
'\x3E','\x06','\x40','\xB9',
'\x5E','\x06','\x40','\xB9',
'\x7E','\x06','\x40','\xB9',
'\x9E','\x06','\x40','\xB9',
'\xBE','\x06','\x40','\xB9',
'\xDE','\x06','\x40','\xB9',
'\xFE','\x06','\x40','\xB9',
'\x1E','\x07','\x40','\xB9',
'\x3E','\x07','\x40','\xB9',
'\x5E','\x07','\x40','\xB9',
'\x7E','\x07','\x40','\xB9',
'\x9E','\x07','\x40','\xB9',
'\xBE','\x07','\x40','\xB9',
'\xDE','\x07','\x40','\xB9',

	};

	std::vector<partInfo> vSearch5;
	for (int i = 0; i < vSearch4.size(); i++) {
		partInfo info = vSearch4.at(i);

		for (size_t s = 0; s < sizeof(info.partHex); s += 4) {
			int X_index = 0;
			for (int y = 0; y < 961; y++) {
				if (memcmp((void*)((size_t)info.partHex + (size_t)s), (BYTE*)&feature5[y * 4], 4) == 0) {

					if (X_index == 31) {
						X_index = 0;
					}
					vSearch5.push_back(info);
					break;
				}
			}
		}
	}

	char feature6[93 * 4] = {
'\x80', '\x00', '\x80', '\x52',
'\x81', '\x00', '\x80', '\x52',
'\x82', '\x00', '\x80', '\x52',
'\x83', '\x00', '\x80', '\x52',
'\x84', '\x00', '\x80', '\x52',
'\x85', '\x00', '\x80', '\x52',
'\x86', '\x00', '\x80', '\x52',
'\x87', '\x00', '\x80', '\x52',
'\x88', '\x00', '\x80', '\x52',
'\x89', '\x00', '\x80', '\x52',
'\x8A', '\x00', '\x80', '\x52',
'\x8B', '\x00', '\x80', '\x52',
'\x8C', '\x00', '\x80', '\x52',
'\x8D', '\x00', '\x80', '\x52',
'\x8E', '\x00', '\x80', '\x52',
'\x8F', '\x00', '\x80', '\x52',
'\x90', '\x00', '\x80', '\x52',
'\x91', '\x00', '\x80', '\x52',
'\x92', '\x00', '\x80', '\x52',
'\x93', '\x00', '\x80', '\x52',
'\x94', '\x00', '\x80', '\x52',
'\x95', '\x00', '\x80', '\x52',
'\x96', '\x00', '\x80', '\x52',
'\x97', '\x00', '\x80', '\x52',
'\x98', '\x00', '\x80', '\x52',
'\x99', '\x00', '\x80', '\x52',
'\x9A', '\x00', '\x80', '\x52',
'\x9B', '\x00', '\x80', '\x52',
'\x9C', '\x00', '\x80', '\x52',
'\x9D', '\x00', '\x80', '\x52',
'\x9E', '\x00', '\x80', '\x52',
'\xA0', '\x00', '\x80', '\x52',
'\xA1', '\x00', '\x80', '\x52',
'\xA2', '\x00', '\x80', '\x52',
'\xA3', '\x00', '\x80', '\x52',
'\xA4', '\x00', '\x80', '\x52',
'\xA5', '\x00', '\x80', '\x52',
'\xA6', '\x00', '\x80', '\x52',
'\xA7', '\x00', '\x80', '\x52',
'\xA8', '\x00', '\x80', '\x52',
'\xA9', '\x00', '\x80', '\x52',
'\xAA', '\x00', '\x80', '\x52',
'\xAB', '\x00', '\x80', '\x52',
'\xAC', '\x00', '\x80', '\x52',
'\xAD', '\x00', '\x80', '\x52',
'\xAE', '\x00', '\x80', '\x52',
'\xAF', '\x00', '\x80', '\x52',
'\xB0', '\x00', '\x80', '\x52',
'\xB1', '\x00', '\x80', '\x52',
'\xB2', '\x00', '\x80', '\x52',
'\xB3', '\x00', '\x80', '\x52',
'\xB4', '\x00', '\x80', '\x52',
'\xB5', '\x00', '\x80', '\x52',
'\xB6', '\x00', '\x80', '\x52',
'\xB7', '\x00', '\x80', '\x52',
'\xB8', '\x00', '\x80', '\x52',
'\xB9', '\x00', '\x80', '\x52',
'\xBA', '\x00', '\x80', '\x52',
'\xBB', '\x00', '\x80', '\x52',
'\xBC', '\x00', '\x80', '\x52',
'\xBD', '\x00', '\x80', '\x52',
'\xBE', '\x00', '\x80', '\x52',
'\xE0', '\x03', '\x1E', '\x32',
'\xE1', '\x03', '\x1E', '\x32',
'\xE2', '\x03', '\x1E', '\x32',
'\xE3', '\x03', '\x1E', '\x32',
'\xE4', '\x03', '\x1E', '\x32',
'\xE5', '\x03', '\x1E', '\x32',
'\xE6', '\x03', '\x1E', '\x32',
'\xE7', '\x03', '\x1E', '\x32',
'\xE8', '\x03', '\x1E', '\x32',
'\xE9', '\x03', '\x1E', '\x32',
'\xEA', '\x03', '\x1E', '\x32',
'\xEB', '\x03', '\x1E', '\x32',
'\xEC', '\x03', '\x1E', '\x32',
'\xED', '\x03', '\x1E', '\x32',
'\xEE', '\x03', '\x1E', '\x32',
'\xEF', '\x03', '\x1E', '\x32',
'\xF0', '\x03', '\x1E', '\x32',
'\xF1', '\x03', '\x1E', '\x32',
'\xF2', '\x03', '\x1E', '\x32',
'\xF3', '\x03', '\x1E', '\x32',
'\xF4', '\x03', '\x1E', '\x32',
'\xF5', '\x03', '\x1E', '\x32',
'\xF6', '\x03', '\x1E', '\x32',
'\xF7', '\x03', '\x1E', '\x32',
'\xF8', '\x03', '\x1E', '\x32',
'\xF9', '\x03', '\x1E', '\x32',
'\xFA', '\x03', '\x1E', '\x32',
'\xFB', '\x03', '\x1E', '\x32',
'\xFC', '\x03', '\x1E', '\x32',
'\xFD', '\x03', '\x1E', '\x32',
'\xFE', '\x03', '\x1E', '\x32',

	};

	std::vector<partInfo> vSearch6;
	for (int i = 0; i < vSearch5.size(); i++) {
		partInfo info = vSearch5.at(i);
		for (size_t s = 0; s < sizeof(info.partHex); s += 4) {
			for (int y = 0; y < 93; y++) {
				if (memcmp((void*)((size_t)info.partHex + (size_t)s), (BYTE*)&feature6[y * 4], 4) == 0) {
					vSearch6.push_back(info);
					break;
				}
			}
		}
	}

	RemoveDuplicatePartInfo(vSearch6);
	std::map<size_t, std::shared_ptr<size_t>> result_map;
	for (size_t i = 0; i < vSearch6.size(); i++) {
		result_map[vSearch6[i].pos] = std::make_shared<size_t>();
	}
	find_func_haed_link(image, size, result_map);
	RemoveDuplicateFuncStartResultMap(result_map);
	printf_head_result_map(result_map);
}


void SearchFeature2(const char* image, size_t image_size) {
	char feature_text_outofrange[40] = {
	0x01, 0x33, 0x53, 0x45, 0x4C, 0x69, 0x6E, 0x75, 0x78, 0x3A, 0x20, 0x20, 0x6F, 0x75, 0x74, 0x20,
	0x6F, 0x66, 0x20, 0x72, 0x61, 0x6E, 0x67, 0x65, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6C,
	0x69, 0x74, 0x79, 0x20, 0x25, 0x64, 0x0A, 0x00
	};
	char feature_text_keycreate[] = {
	'\0', 'k', 'e', 'y', 'c', 'r', 'e', 'a', 't', 'e', '\0'
	};
	char feature_text_opfscreateinvalidcontext[] = {
	'\0', 'o', 'p', '=', 'f', 's', 'c', 'r', 'e', 'a', 't', 'e', ' ', 'i', 'n', 'v', 'a', 'l', 'i', 'd', '_', 'c', 'o', 'n', 't', 'e', 'x', 't', '=', '\0'
	};
	char feature_text_auidseslsmselinuxres[] = {
	"auid=%u ses=%u lsm=selinux res=1"
	};

	char feature_text_failedtoloadpolicy[34] = {
	0x01, 0x34, 0x53, 0x45, 0x4C, 0x69, 0x6E, 0x75, 0x78, 0x3A, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65,
	0x64, 0x20, 0x74, 0x6F, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x20, 0x70, 0x6F, 0x6C, 0x69, 0x63, 0x79, 0x0A, 0x00
	};

	char feature_text_contextsizeexceedspayloadmax[55] = {
	0x01, 0x33, 0x53, 0x45, 0x4C, 0x69, 0x6E, 0x75, 0x78, 0x3A, 0x20, 0x25, 0x73, 0x3A, 0x20, 0x20,
	0x63, 0x6F, 0x6E, 0x74, 0x65, 0x78, 0x74, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x20, 0x28, 0x25, 0x75,
	0x29, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x73, 0x20, 0x70, 0x61, 0x79, 0x6C, 0x6F, 0x61,
	0x64, 0x20, 0x6D, 0x61, 0x78, 0x0A, 0x00
	};

	char feature_text_sshus[] = {
		"%s %s %hu %s"
	};
	char feature_text_xxxxux[] = {
		"%x %x %x %x %u %x"
	};
	size_t outofrange_text_offset = 0;
	size_t keycreate_text_offset = 0;
	size_t opfscreateinvalidcontext_text_offset = 0;
	size_t auidseslsmselinuxres_text_offset = 0;
	size_t failedtoloadpolicy_text_offset = 0;
	size_t contextsizeexceedspayloadmax_text_offset = 0;
	size_t sshus_text_offset = 0;
	size_t xxxux_text_offset = 0;

	for (size_t offset = 0; offset < image_size; offset++) {
		const char* paddr = image + offset;
		if (outofrange_text_offset == 0 && (image_size - offset) >= sizeof(feature_text_outofrange)) {
			if (memcmp(paddr, &feature_text_outofrange, sizeof(feature_text_outofrange)) == 0) {
				printf("SELinux: out of range text->0x%llx\n", (void*)offset);
				outofrange_text_offset = offset;
			}
		}
		if (keycreate_text_offset == 0 && (image_size - offset) >= sizeof(feature_text_keycreate)) {
			if (memcmp(paddr, &feature_text_keycreate, sizeof(feature_text_keycreate)) == 0) {
				printf("keycreate text->0x%llx\n", (void*)offset);
				keycreate_text_offset = offset;
			}
		}
		if (opfscreateinvalidcontext_text_offset == 0 && (image_size - offset) >= sizeof(feature_text_opfscreateinvalidcontext)) {
			if (memcmp(paddr, &feature_text_opfscreateinvalidcontext, sizeof(feature_text_opfscreateinvalidcontext)) == 0) {
				printf("opfscreateinvalidcontext text->0x%llx\n", (void*)offset);
				opfscreateinvalidcontext_text_offset = offset;
			}
		}
		if (auidseslsmselinuxres_text_offset == 0 && (image_size - offset) >= sizeof(feature_text_auidseslsmselinuxres)) {
			if (memcmp(paddr, &feature_text_auidseslsmselinuxres, sizeof(feature_text_auidseslsmselinuxres)) == 0) {
				printf("auidseslsmselinuxres text->0x%llx\n", (void*)offset);
				auidseslsmselinuxres_text_offset = offset;
			}
		}
		if (failedtoloadpolicy_text_offset == 0 && (image_size - offset) >= sizeof(feature_text_failedtoloadpolicy)) {
			if (memcmp(paddr, &feature_text_failedtoloadpolicy, sizeof(feature_text_failedtoloadpolicy)) == 0) {
				printf("failedtoloadpolicy text->0x%llx\n", (void*)offset);
				failedtoloadpolicy_text_offset = offset;
			}
		}
		if (contextsizeexceedspayloadmax_text_offset == 0 && (image_size - offset) >= sizeof(feature_text_contextsizeexceedspayloadmax)) {
			if (memcmp(paddr, &feature_text_contextsizeexceedspayloadmax, sizeof(feature_text_contextsizeexceedspayloadmax)) == 0) {
				printf("contextsizeexceedspayloadmax text->0x%llx\n", (void*)offset);
				contextsizeexceedspayloadmax_text_offset = offset;
			}
		}
		if (sshus_text_offset == 0 && (image_size - offset) >= sizeof(feature_text_sshus)) {
			if (memcmp(paddr, &feature_text_sshus, sizeof(feature_text_sshus)) == 0) {
				printf("contextsizeexceedspayloadmax text->0x%llx\n", (void*)offset);
				sshus_text_offset = offset;
			}
		}
		if (xxxux_text_offset == 0 && (image_size - offset) >= sizeof(feature_text_xxxxux)) {
			if (memcmp(paddr, &feature_text_xxxxux, sizeof(feature_text_xxxxux)) == 0) {
				printf("xxxux text->0x%llx\n", (void*)offset);
				xxxux_text_offset = offset;
			}
		}
	}
	
	printf("\n");

	std::map<std::tuple<std::string, size_t>, std::shared_ptr<std::vector<xrefs_info>>> result_map;
	result_map[{"[cred_has_capability]", outofrange_text_offset}] = std::make_shared<std::vector<xrefs_info>>();
	result_map[{"[selinux_getprocattr/selinux_setprocattr]", keycreate_text_offset}] = std::make_shared<std::vector<xrefs_info>>();
	result_map[{"[selinux_setprocattr]", opfscreateinvalidcontext_text_offset}] = std::make_shared<std::vector<xrefs_info>>();
	result_map[{"[sel_write_load]", auidseslsmselinuxres_text_offset}] = std::make_shared<std::vector<xrefs_info>>();
	result_map[{"[sel_write_load]", failedtoloadpolicy_text_offset}] = std::make_shared<std::vector<xrefs_info>>();
	result_map[{"[sel_write_context/sel_write_create]", contextsizeexceedspayloadmax_text_offset}] = std::make_shared<std::vector<xrefs_info>>();
	result_map[{"[sel_write_validatetrans/sel_write_create]", sshus_text_offset}] = std::make_shared<std::vector<xrefs_info>>();
	result_map[{"[sel_write_access]", xxxux_text_offset}] = std::make_shared<std::vector<xrefs_info>>();
	for (auto iter = result_map.begin(); iter != result_map.end();) {
		if (std::get<1>(iter->first) == 0) {
			iter = result_map.erase(iter);
		} else {
			iter++;
		}
	}
	if (result_map.size() == 0) {
		printf("[ERROR] text offset empty.\n");
		return;
	}
	find_xrefs_link((const char*)image, image_size, result_map);
	printf_xrefs_result_map(result_map);
}

int main(int argc, char* argv[]) {
	char* inimage = argv[0];
	++argv;
	--argc;


	if (argc < 1) {
		std::cout << "无输入文件" << std::endl;
		system("pause");
		return 0;
	}



	int nFileSize = 0;
	char* image = GetFileBuf(argv[0], nFileSize);

	if (!image) {
		std::cout << "打开文件失败:" << argv[0] << std::endl;
		system("pause");
		return 0;
	}
	std::cout << "===============Engine1===============" << std::endl;
	SearchFeature1(image, nFileSize);
	std::cout << "===============Engine2===============" << std::endl;
	SearchFeature2(image, nFileSize);
	free(image);
	system("pause");
	return 0;

}
